#include "sort.h"
#include <stdio.h>

/**
 * sift_down - Repair the heap whose root element
 * is at index 'start', assuming the heaps rooted at its children are valid
 * @array: Array to sort
 * @size: Size of the array
 * @start: Start index of the heap
 * @end: End index of the heap
 *
 * Description: sift_down function to heapify the array
 */
void sift_down(int *array, size_t size, size_t start, size_t end)
{
    size_t root = start;

    while ((root * 2) + 1 <= end) {
        size_t child = (root * 2) + 1;
        size_t swap = root;

        if (array[swap] < array[child])
            swap = child;
        if (child + 1 <= end && array[swap] < array[child + 1])
            swap = child + 1;
        if (swap != root) {
            int temp = array[root];

            array[root] = array[swap];
            array[swap] = temp;
            print_array(array, size);
            root = swap;
        } else
            return;
    }
}

/**
 * heap_sort - Function to perform Heap Sort algorithm
 * @array: Array to sort
 * @size: Size of the array
 *
 * Description: heap_sort function that sorts an array of integers
 * in ascending order using the Heap sort algorithm
 */
void heap_sort(int *array, size_t size)
{
    size_t start = (size - 2) / 2;

    while (start < size) {
        sift_down(array, size, start, size - 1);
        if (start == 0)
            break;
        start--;
    }
    size_t end = size - 1;

    while (end > 0) {
        int temp = array[end];

        array[end] = array[0];
        array[0] = temp;
        print_array(array, size);
        end--;
        sift_down(array, size, 0, end);
    }
}
